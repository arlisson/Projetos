import numpy as np
import librosa


def print_audio_frequencies(audio_path):
    # Carregar o arquivo de áudio
    y, sr = librosa.load(audio_path, sr=None)

    # Define os parâmetros para a STFT com uma janela de amostragem maior
    n_fft = 2**14  # Aumentando o tamanho da janela de amostragem
    hop_length = 2**12  # Ajustando o hop length para manter uma boa sobreposição

    # Calcula a STFT do sinal de áudio
    D = np.abs(librosa.stft(y, n_fft=n_fft, hop_length=hop_length))

    # Frequências correspondentes aos bins da FFT
    freqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)

    # Calcula os tempos correspondentes às colunas da STFT
    times = librosa.frames_to_time(
        np.arange(D.shape[1]), sr=sr, hop_length=hop_length)

    # Encontrar a frequência dominante em cada janela de tempo
    for t, mag in zip(times, D.T):
        dominant_freq = freqs[np.argmax(mag)]
        print(
            f"Tempo: {t:.2f}s, {nota_musical(dominant_freq)}")


def nota_musical(frequencia):
    # Definindo os intervalos de frequência para cada nota em cada oitava
    intervalos = {
        "C": [(16.352, 17.323), (32.703, 34.647), (65.406, 69.295), (130.810, 138.590),
              (261.000, 277.179), (523.250, 554.369), (1046.500,
                                                       1108.699), (2093.000, 2217.499),
              (4186.000, 4434.899), (8372.000, 8869.799), (16744.000, 17739.699)],

        "C#/Db": [(17.324, 18.353), (34.648, 36.707), (69.296, 73.415), (138.590, 146.829),
                  (277.180, 293.650), (554.370, 587.329), (1108.700,
                                                           1174.699), (2217.500, 2349.299),
                  (4434.900, 4698.599), (8869.799, 9397.299), (17739.700, 18794.499)],

        "D": [(18.354, 19.449), (36.708, 38.890), (73.416, 77.781), (146.830, 155.559),
              (293.660, 311.129), (587.330, 622.249), (1174.700,
                                                       1244.449), (2349.300, 2488.999),
              (4698.600, 4977.999), (9397.300, 9956.999), (18794.500, 19912.999)],

        "D#/Eb": [(19.445, 20.601), (38.891, 41.202), (77.782, 82.406), (155.560, 164.809),
                  (311.130, 329.629), (622.250, 659.259), (1244.500,
                                                           1318.499), (2489.000, 2636.999),
                  (4978.000, 5273.999), (9956.100, 10548.099), (19912.100, 21096.2)],

        "E": [(20.602, 21.826), (41.203, 43.653), (82.407, 87.306), (164.810, 174.600),
              (329.630, 349.229), (659.260, 698.449), (1318.500,
                                                       1396.899), (2637.000, 2793.799),
              (5274.000, 5587.699), (10548.100, 11175.299), (21096.200, 22350.599)],

        "F": [(21.827, 23.124), (43.654, 46.248), (87.307, 92.498), (174.610, 184.999),
              (349.230, 369.989), (668.460, 739.989), (1396.899,
                                                       1479.999), (2793.799, 2959.999),
              (5587.700, 5919.899), (11175.300, 11839.799), (22350.600, 23679.599)],

        "F#/Gb": [(23.125, 24.499), (46.249, 48.998), (92.499, 97.998), (185.000, 195.999),
                  (369.99, 391.999), (739.990, 783.989), (1480.000,
                                                          1567.999), (2960.000, 3135.999),
                  (5919.900, 6271.899), (11839.800, 12543.899), (23679.600, 25087.699)],

        "G": [(25.500, 25.956), (48.999, 51.912), (97.999, 103.829), (196.000, 207.649),
              (392.000, 415.299), (783.990, 830.609), (1568.000,
                                                       1661.199), (3136.00, 3322.399),
              (6271.900, 6644.899), (12543.900, 13289.799), (25087.700, 26579.499)],

        "G#/Ab": [(25.957, 27.499), (51.913, 54.999), (103.830, 109.999), (207.650, 219.999),
                  (415.300, 439.999), (830.610, 879.999), (1661.200,
                                                           1759.999), (3322.400, 3519.999),
                  (6644.900, 7039.999), (13289.800, 14079.999), (26579.500, 28159.999)],

        "A": [(27.500, 29.134), (55.000, 58.269), (110.000, 116.539), (220.000, 233.079),
              (440.000, 466.159), (880.000, 932.329), (1760.000,
                                                       1864.699), (3520.000, 3729.299),
              (7040.000, 7458.599), (14080.000, 14917.199), (28160.000, 29834.499)],

        "A#/Bb": [(29.135, 30.867), (58.270, 61.734), (116.540, 123.469), (233.080, 246.939),
                  (466.160, 493.879), (932.330, 987.769), (1864.700,
                                                           1975.499), (3729.300, 3951.099),
                  (7458.600, 7902.099), (14917.200, 15804.299), (29834.500, 31608.499)],

        "B": [(30.868, 32.702), (61.735, 65.405), (123.470, 130.809), (246.940, 260.999),
              (493.880, 523.249), (987.770, 1046.499), (1975.500, 2092.999), (3951.100, 4185.999), (7902.100, 8371.999), (15804.300, 16743.999)]
    }

    # Verificar em qual intervalo de frequência a frequência fornecida se encaixa
    for nota, intervalo_oitavas in intervalos.items():
        for oitava, intervalo in enumerate(intervalo_oitavas):
            if intervalo[0] <= frequencia <= intervalo[1]:
                return f"{nota} Frequência: {frequencia:.2f}Hz Oitava: {oitava}"

    return "Nota não encontrada"


# Caminho para o arquivo de áudio
audio_path = 'notas_musicais.wav'
print_audio_frequencies(audio_path)
